import org.ajoberstar.grgit.Grgit

plugins {
    // used to upload artifacts to the bintray repo
    id "com.jfrog.bintray" version "1.6"
    // used to create and push a git tag automatically when releasing
    id "org.ajoberstar.grgit" version "1.4.2"
}

apply plugin: 'java'
apply from: 'http://dl.bintray.com/content/shemnon/javafx-gradle/8.1.1/javafx.plugin'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'

group = 'org.hildan'
version = '1.6'
sourceCompatibility = 1.8
description = 'A JavaFX program to view log files in a beautiful way.'

def mainClassName = "org.hildan.fxlog.FXLog"

// access to the git repository API
def gitRepo = Grgit.open(project.file('.'))

repositories { mavenCentral() }

dependencies {
    compile 'org.controlsfx:controlsfx:8.40.10'
    compile 'commons-io:commons-io:2.4'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'org.jetbrains:annotations:15.0'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    testCompile 'junit:junit:4.+'
}

// to inject the project version in main.fxml
processResources {
    ['**/*.properties', '**/main.fxml'].each {
        filesMatching(it) {
            f -> f.expand projectVersion: project.version
        }
    }
}

// to build a fat jar with all dependencies included
jar {
    manifest { attributes "Main-Class": mainClassName }
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

// defines JavaFX deployment info
javafx {
    appID 'FX-Log'
    appName 'FX Log'
    vendor = "Hildan Software"
    mainClass mainClassName

    profiles {
        windows {
            category = 'Utils'
        }
    }

    copyright = 'Copyright (c) 2016 Joffrey Bion'
    description = project.description
    licenseType = 'MIT'
    installSystemWide = true
    menu = true
    shortcut = true
}

bintrayUpload.dependsOn tasks.jfxDeploy

bintray {
    user = project.hasProperty('bintrayUsername') ? project.bintrayUsername : ''
    key = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : ''
    configurations = ['archives']

    publish = true // the version should be auto published after an upload

    pkg {
        repo = project.hasProperty('bintrayRepoApps') ? project.bintrayRepoApps : ''
        name = project.name
        desc = project.description
        labels = ['log', 'viewer']

        String githubRepoName = project.name
        websiteUrl = 'https://github.com/joffrey-bion/' + githubRepoName
        issueTrackerUrl = 'https://github.com/joffrey-bion/' + githubRepoName + '/issues'
        vcsUrl = 'https://github.com/joffrey-bion/' + githubRepoName + '.git'

        licenses = ['MIT']
        version {
            vcsTag = 'v' + project.version
            gpg { sign = true }
        }
    }
}

task commitRelease << {
    gitRepo.add(patterns: ['build.gradle'])
    gitRepo.commit(message: "Version ${project.version}")
    gitRepo.push()
}

task tagRelease << {
    gitRepo.tag.add {
        name = "v${project.version}"
        message = "Version ${project.version}"
    }
    gitRepo.push(tags: true)
    println "Generated tag for version ${project.version}"
}
tagRelease.mustRunAfter(commitRelease)

task generateChangeLog(type: Exec) {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'github_changelog_generator', '--exclude-labels=wontfix,on hold,duplicate'
    } else {
        commandLine 'github_changelog_generator', '--exclude-labels=wontfix,on hold,duplicate'
    }

    doLast {
        // fix the bintray links (remove V prefix)
        String changelogFile = 'CHANGELOG.md'
        String changelogContents = new File(changelogFile).getText('UTF-8')
        changelogContents = changelogContents.replaceAll('applications/fx-log/v', 'applications/fx-log/')
        new File(changelogFile).write(changelogContents, 'UTF-8')
    }
}

task commitChangeLog(dependsOn: 'generateChangeLog') {
    doLast {
        gitRepo.add(patterns: ['CHANGELOG.md'])
        gitRepo.commit(message: "Changelog for version ${project.version}")
        gitRepo.push()
    }
}

commitChangeLog.mustRunAfter(tagRelease)
bintrayUpload.mustRunAfter(tagRelease)

task release(dependsOn: ['commitRelease', 'tagRelease', 'bintrayUpload', 'commitChangeLog'])

checkstyle {
    toolVersion = '6.15'
}

// Fail build on Checkstyle warnings
// https://issues.gradle.org/browse/GRADLE-2888
def checkstyleWarningsFile = 'build/reports/checkstyle/main.xml'

task verifyNoCheckstyleWarnings(type: GradleBuild) {
    doLast {
        File warningsFile = file(checkstyleWarningsFile)
        if (warningsFile.exists() && warningsFile.text.contains("<error ")) {
            throw new GradleException("There were checkstyle warnings! For more info check $warningsFile")
        }
    }
}

checkstyleMain.finalizedBy verifyNoCheckstyleWarnings